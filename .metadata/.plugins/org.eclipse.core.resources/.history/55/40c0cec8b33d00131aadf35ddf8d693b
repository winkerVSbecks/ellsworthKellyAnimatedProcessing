import processing.core.PApplet;
import processing.core.PVector;
import pbox2d.*;
import org.jbox2d.common.*;
import org.jbox2d.dynamics.joints.*;

public class SpringyTriangle {
	
	PApplet p; 
	PBox2D b;

	Particle tAnchor;
	Particle tStartAnchor;
	Particle tEndAnchor;
	Particle tImpactor;

	PVector topStart;
	PVector topAnchor;
	PVector tEnd;
	PVector topMp;

	int c;

	DistanceJointDef topSpring;

	float a;
	Vec2 imp;
	Vec2 force;

	SpringyTriangle(PApplet _p, PBox2D _b, PVector _topStart, PVector _topAnchor, PVector _tEnd, int _c, Vec2 _force) {
		p = _p;
		b = _b;
		topStart = _topStart;
		topAnchor = _topAnchor;
		tEnd = _tEnd;
		topMp = new PVector( (topStart.x+tEnd.x)/2 , (topStart.y+tEnd.y)/2);  
		a = PVector.angleBetween(topMp, topAnchor);
		c = _c;
		force = _force;

		tAnchor = new Particle(p, b, topAnchor.x, topAnchor.y, 4, true);
		tImpactor = new Particle(p, b, topMp.x, topMp.y, 4, false);
		tStartAnchor = new Particle(p, b, topStart.x, topStart.y, 4, true);
		tEndAnchor = new Particle(p, b, tEnd.x, tEnd.y, 4, true);

		topSpring = new DistanceJointDef();

		DistanceJointDef djd = new DistanceJointDef();
		djd.bodyA = tAnchor.body;
		djd.bodyB = tImpactor.body;
		float len = PApplet.dist(topMp.x, topMp.y, topAnchor.x, topAnchor.y);
		djd.length = b.scalarPixelsToWorld(len);
		djd.frequencyHz = 1;  // Try a value less than 5
		djd.dampingRatio = 0.25f; // Ranges between 0 and 1
		DistanceJoint dj = (DistanceJoint) b.world.createJoint(djd);

		DistanceJointDef djdA = new DistanceJointDef();
		djdA.bodyA = tStartAnchor.body;
		djdA.bodyB = tImpactor.body;
		float lenA = PApplet.dist(topMp.x, topMp.y, topStart.x, topStart.y);
		djdA.length = b.scalarPixelsToWorld(lenA);
		djdA.frequencyHz = 1;  // Try a value less than 5
		djdA.dampingRatio = 0.1f; // Ranges between 0 and 1
		DistanceJoint djA = (DistanceJoint) b.world.createJoint(djdA);

		DistanceJointDef djdB = new DistanceJointDef();
		djdB.bodyA = tEndAnchor.body;
		djdB.bodyB = tImpactor.body;
		float lenB = PApplet.dist(topMp.x, topMp.y, tEnd.x, tEnd.y);
		djdB.length = b.scalarPixelsToWorld(lenB);
		djdB.frequencyHz = 1;  // Try a value less than 5
		djd.dampingRatio = 0.1f; // Ranges between 0 and 1
		DistanceJoint djB = (DistanceJoint) b.world.createJoint(djdB);
	}

	void update() {
		imp = tImpactor.getPosition();
		p.fill(c);
		p.noStroke();
		p.beginShape();
			p.vertex(topAnchor.x, topAnchor.y);
			p.vertex(tEnd.x, tEnd.y);
			p.bezierVertex(imp.x, imp.y, topStart.x, topStart.y, topStart.x, topStart.y);
		p.endShape(); 
	}

	void impulse() {
		float ping = p.random(-1,1);
		int pinger = 1;
		if (ping > 0) pinger = 1;
		if (ping <= 0) pinger = -1;
		Vec2 appliedForce = new Vec2(force.x*pinger, force.y/2);
		// Apply force
		tImpactor.body.applyLinearImpulse(appliedForce, imp);
	}
}


